name: Test Suite

on:
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  # all_unit:
  #   if: |
  #     startsWith(github.head_ref, 'feature/')
  #     || startsWith(github.head_ref, 'fix/')
  #     || startsWith(github.head_ref, 'refactor/')
  #   runs-on: ubuntu-latest
  #   services:
  #     postgres:
  #       image: postgres:14.5
  #       env:
  #         POSTGRES_USER: conduit_test_user
  #         POSTGRES_PASSWORD: conduit!
  #         POSTGRES_DB: conduit_test_db
  #         POSTGRES_PORT: 15432
  #       ports:
  #         - 15432:5432
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: dart-lang/setup-dart@v1
  #       with:
  #         sdk: dev
  #     - name: Get Dependencies
  #       run: |
  #         dart pub global activate melos
  #         cd packages/isolate_exec_test_packages/test_package && dart pub get
  #         melos bootstrap
  #         melos cache-source
  #     - name: Run tests
  #       run: . ./ci/.env && melos test-unit

  linux:
    if: |
      startsWith(github.head_ref, 'feature/')
      || startsWith(github.head_ref, 'fix/')
      || startsWith(github.head_ref, 'refactor/')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        runner_args: [dart test -j1 -t cli test/*, melos test-unit-scoped, dart tool/generated_test_runner.dart]
    env:
      TEST_DIR: packages/conduit
    services:
      postgres:
        image: postgres:14.5
        env:
          POSTGRES_USER: conduit_test_user
          POSTGRES_PASSWORD: conduit!
          POSTGRES_DB: conduit_test_db
          POSTGRES_PORT: 15432
        ports:
          - 15432:5432
    steps:
      - uses: actions/checkout@v3
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: dev
      - name: Get Dependencies
        run: |
          dart pub global activate melos
          melos bootstrap
          melos cache-source
          dart pub get --directory=packages/isolate_exec_test_packages/test_package --offline
          dart pub get --directory=packages/runtime_test_packages/application --offline
          dart pub get --directory=packages/runtime_test_packages/dependency --offline
      - name: Run tests
        working-directory: ${{ env.TEST_DIR }}
        run: . ../../ci/.env && ${{ matrix.runner_args }}

  macos:
    if: |
      startsWith(github.head_ref, 'feature/')
      || startsWith(github.head_ref, 'fix/')
      || startsWith(github.head_ref, 'refactor/')
    runs-on: macos-latest
    strategy:
      matrix:
        runner_args: [dart test -j1 -t cli test/*, melos test-unit-scoped, dart tool/generated_test_runner.dart]
    env:
      TEST_DIR: packages/conduit
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 15432
      PGPORT: 15432
      POSTGRES_ADMIN_USER: conduit_test_user
      POSTGRES_ADMIN_PASSWORD: conduit!
      POSTGRES_USER: conduit_test_user
      POSTGRES_PASSWORD: conduit!
      POSTGRES_DB: conduit_test_db
      TEST_DB_ENV_VAR: postgres://user:password@host:15432/dbname
      TEST_VALUE: 1
      TEST_BOOL: true
    steps:
    - name: Start PostgreSQL
      run: |
        mkdir -p datadir
        initdb -D datadir
        pg_ctl -o "-F -p ${{env.POSTGRES_PORT}}" -D datadir start
        echo "Check PostgreSQL service is running"
        i=10
        COMMAND='pg_isready'
        while [ $i -gt 0 ]; do
            echo "Check PostgreSQL service status"
            eval $COMMAND && break
            ((i--))
            if [ $i == 0 ]; then
                echo "PostgreSQL service not ready, all attempts exhausted"
                exit 1
            fi
            echo "PostgreSQL service not ready, wait 10 more sec, attempts left: $i"
            sleep 10
        done
    - name: Create user
      run: |
        psql --command="CREATE USER ${{ env.POSTGRES_USER }} PASSWORD '${{ env.POSTGRES_PASSWORD }}'" --command="\du" postgres
    - name: Create timetable database
      run: |
        createdb --owner=${{ env.POSTGRES_USER }} ${{ env.POSTGRES_DB }}
    - uses: actions/checkout@v3
    - uses: dart-lang/setup-dart@v1
      with:
        sdk: dev
    - name: Get Dependencies
      run: |
        dart pub global activate melos
        melos bootstrap
        melos cache-source
        dart pub get --directory=packages/isolate_exec_test_packages/test_package --offline
        dart pub get --directory=packages/runtime_test_packages/application --offline
        dart pub get --directory=packages/runtime_test_packages/dependency --offline
    - name: Run tests
      working-directory: ${{ env.TEST_DIR }}
      run: . ../../ci/.env && ${{ matrix.runner_args }}

  windows:
    if: |
      startsWith(github.head_ref, 'feature/')
      || startsWith(github.head_ref, 'fix/')
      || startsWith(github.head_ref, 'refactor/')
    runs-on: windows-latest
    strategy:
      matrix:
        runner_args: [dart test -j1 -t cli test/, melos test-unit, dart tool/generated_test_runner.dart]
    env:
      TEST_DIR: packages/conduit
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 15432
      PGPORT: 15432
      POSTGRES_ADMIN_USER: conduit_test_user
      POSTGRES_ADMIN_PASSWORD: conduit!
      POSTGRES_USER: conduit_test_user
      POSTGRES_PASSWORD: conduit!
      POSTGRES_DB: conduit_test_db
      TEST_DB_ENV_VAR: postgres://user:password@host:15432/dbname
      TEST_VALUE: 1
      TEST_BOOL: true
    steps:
    - name: Start PostgreSQL
      run: |
        mkdir datadir
        icacls "datadir" /grant Users:F /T
        & $env:PGBIN\initdb -D datadir
        & $env:PGBIN\pg_ctl -o "-F -p ${{env.POSTGRES_PORT}}" -D datadir start
        Start-Process -FilePath "$env:PGBIN\pg_isready" -Wait -PassThru
    - name: Create user
      run: |
        & $env:PGBIN\psql --command="CREATE USER ${{ env.POSTGRES_USER }} PASSWORD '${{ env.POSTGRES_PASSWORD }}'" --command="\du"
    - name: Create conduit test database
      run: |
        & $env:PGBIN\createdb ${{ env.POSTGRES_DB }}
    - uses: actions/checkout@v3
    - uses: dart-lang/setup-dart@v1
      with:
        sdk: dev
    - name: Get Dependencies
      run: |
        choco install yq
        dart pub global activate melos
        dart pub global run melos:melos bootstrap
        dart pub global run melos:melos cache-source-win
        dart pub get --directory=packages/isolate_exec_test_packages/test_package --offline
        dart pub get --directory=packages/runtime_test_packages/application --offline
        dart pub get --directory=packages/runtime_test_packages/dependency --offline
    - name: Run tests
      working-directory: ${{ env.TEST_DIR }}
      run: ${{ matrix.runner_args }}